name: Build xmrig for Linux ARM64

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build-arm64:
    # 指定运行在支持 ARM64 的环境中
    runs-on: ubuntu-latest
    # 使用容器运行 ARM64 镜像
    container:
      image: ubuntu:24.04  # Ubuntu 24.04 镜像，支持 ARM64
      options: --platform linux/arm64

    steps:


    - name: 验证架构
      run: |
        uname -m  # 应输出 aarch64
        lscpu

    - name: 执行构建命令
      run: |
        echo "运行在 Ubuntu ARM64 上"

    # 可选：添加自定义清理步骤
    - name: 自定义清理
      if: always()  # 无论作业是否失败都会运行
      run: |
        echo "跳过系统版本检查"

    - name: Set up variables
      id: vars
      run: echo "RELEASE_TAG=xmrig-arm64-$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          git build-essential cmake automake libtool autoconf

    - name: Cache xmrig dependencies
      uses: actions/cache@v3
      with:
        path: scripts/deps
        key: xmrig-deps-${{ runner.os }}-${{ hashFiles('scripts/build_deps.sh') }}
        restore-keys: |
          xmrig-deps-${{ runner.os }}-

    - name: Build dependencies
      run: |
        cd scripts
        ./build_deps.sh

    - name: Configure (CMake for ARM64)
      run: |
        mkdir -p build
        cd build
        cmake .. -DXMRIG_DEPS=scripts/deps

    - name: Build xmrig
      run: |
        cd build
        make -j$(nproc)

    - name: Archive binary
      run: |
        mkdir -p output
        cp build/xmrig output/xmrig-linux-arm64
        tar -czvf xmrig-linux-arm64.tar.gz -C output xmrig-linux-arm64

    - name: Create GitHub Release and Upload Artifact
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ env.RELEASE_TAG }}
        tag_name: ${{ env.RELEASE_TAG }}
        files: xmrig-linux-arm64.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
